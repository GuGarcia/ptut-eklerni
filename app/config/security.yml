security:
    encoders:
        Eklerni\DatabaseBundle\Entity\Enseignant:
            algorithm:  sha512
        Eklerni\DatabaseBundle\Entity\Eleve:
            algorithm:  sha512

    role_hierarchy:
        ROLE_ELEVE:       ROLE_ELEVE
        ROLE_ENSEIGNANT:  [ROLE_ENSEIGNANT, ROLE_ELEVE]
        ROLE_DIRECTEUR: [ROLE_DIRECTEUR, ROLE_ENSEIGNANT, ROLE_ELEVE]

    providers:
        chain_provider:
            chain:
                providers: [enseignants, eleves]
        enseignants:
            entity: { class: EklerniDatabaseBundle:Enseignant, property: username }
        eleves:
            entity: { class: EklerniDatabaseBundle:Eleve, property: username }

    firewalls:
        dev:
            pattern:  ^/(_(profiler|wdt|trans)|css|images|js)/
            security: false
        cas:
            pattern:  ~
            form_login:
                login_path: eklerni_cas_login
                check_path: eklerni_cas_login_check
                username_parameter: "eklerni_login[username]"
                password_parameter: "eklerni_login[password]"
                csrf_provider: form.csrf_provider
                csrf_parameter: "eklerni_login[_token]"
                intention: authentication
                success_handler: eklerni_cas.auth.handler
            logout:
                path:   eklerni_cas_logout
                target: eklerni_cas_login
            anonymous:  ~

    access_control:
        - { path: ^/cas/profile/*, allow_if: "has_role('ROLE_ELEVE') or has_role('ROLE_ENSEIGNANT') or has_role('ROLE_DIRECTEUR')" }
        - { path: ^/cas, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^.*/front, roles: ROLE_ELEVE }
        - { path: ^.*/back/direction, roles: ROLE_DIRECTEUR }
        - { path: ^.*/back, roles: ROLE_ENSEIGNANT }
